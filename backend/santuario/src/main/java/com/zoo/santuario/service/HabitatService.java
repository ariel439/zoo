package com.zoo.santuario.service;

import com.zoo.santuario.dto.HabitatRequestDTO;
import com.zoo.santuario.dto.HabitatResponseDTO;
import com.zoo.santuario.model.Habitat;
import com.zoo.santuario.repository.HabitatRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class HabitatService {

    @Autowired
    private HabitatRepository habitatRepository;

    public List<HabitatResponseDTO> getAllHabitats() {
        return habitatRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public Optional<HabitatResponseDTO> getHabitatById(Long id) {
        return habitatRepository.findById(id)
                .map(this::convertToDto);
    }

    public HabitatResponseDTO createHabitat(HabitatRequestDTO habitatRequestDTO) {
        Habitat habitat = convertToEntity(habitatRequestDTO);
        Habitat savedHabitat = habitatRepository.save(habitat);
        return convertToDto(savedHabitat);
    }

    public Optional<HabitatResponseDTO> updateHabitat(Long id, HabitatRequestDTO habitatRequestDTO) {
        return habitatRepository.findById(id)
                .map(existingHabitat -> {
                    existingHabitat.setName(habitatRequestDTO.getName());
                    existingHabitat.setType(habitatRequestDTO.getType());
                    existingHabitat.setCapacity(habitatRequestDTO.getCapacity());
                    existingHabitat.setStatus(habitatRequestDTO.getStatus());
                    Habitat updatedHabitat = habitatRepository.save(existingHabitat);
                    return convertToDto(updatedHabitat);
                });
    }

    public boolean deleteHabitat(Long id) {
        if (habitatRepository.existsById(id)) {
            habitatRepository.deleteById(id);
            return true;
        }
        return false;
    }

    private HabitatResponseDTO convertToDto(Habitat habitat) {
        return new HabitatResponseDTO(
                habitat.getId(),
                habitat.getName(),
                habitat.getType(),
                habitat.getCapacity(),
                habitat.getStatus()
        );
    }

    private Habitat convertToEntity(HabitatRequestDTO habitatRequestDTO) {
        return new Habitat(
                null, // ID will be generated by the database
                habitatRequestDTO.getName(),
                habitatRequestDTO.getType(),
                habitatRequestDTO.getCapacity(),
                habitatRequestDTO.getStatus()
        );
    }
}