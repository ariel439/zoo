package com.zoo.santuario.service;

import com.zoo.santuario.dto.AlimentacaoRequestDTO;
import com.zoo.santuario.dto.AlimentacaoResponseDTO;
import com.zoo.santuario.model.Alimentacao;
import com.zoo.santuario.repository.AlimentacaoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AlimentacaoService {

    @Autowired
    private AlimentacaoRepository alimentacaoRepository;

    public List<AlimentacaoResponseDTO> getAllAlimentacoes() {
        return alimentacaoRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public Optional<AlimentacaoResponseDTO> getAlimentacaoById(Long id) {
        return alimentacaoRepository.findById(id)
                .map(this::convertToDto);
    }

    public AlimentacaoResponseDTO createAlimentacao(AlimentacaoRequestDTO alimentacaoRequestDTO) {
        Alimentacao alimentacao = convertToEntity(alimentacaoRequestDTO);
        Alimentacao savedAlimentacao = alimentacaoRepository.save(alimentacao);
        return convertToDto(savedAlimentacao);
    }

    public Optional<AlimentacaoResponseDTO> updateAlimentacao(Long id, AlimentacaoRequestDTO alimentacaoRequestDTO) {
        return alimentacaoRepository.findById(id)
                .map(existingAlimentacao -> {
                    existingAlimentacao.setFoodType(alimentacaoRequestDTO.getFoodType());
                    existingAlimentacao.setQuantity(alimentacaoRequestDTO.getQuantity());
                    existingAlimentacao.setFeedingTime(alimentacaoRequestDTO.getFeedingTime());
                    Alimentacao updatedAlimentacao = alimentacaoRepository.save(existingAlimentacao);
                    return convertToDto(updatedAlimentacao);
                });
    }

    public boolean deleteAlimentacao(Long id) {
        if (alimentacaoRepository.existsById(id)) {
            alimentacaoRepository.deleteById(id);
            return true;
        }
        return false;
    }

    private AlimentacaoResponseDTO convertToDto(Alimentacao alimentacao) {
        return new AlimentacaoResponseDTO(
                alimentacao.getId(),
                alimentacao.getFoodType(),
                alimentacao.getQuantity(),
                alimentacao.getFeedingTime()
        );
    }

    private Alimentacao convertToEntity(AlimentacaoRequestDTO alimentacaoRequestDTO) {
        return new Alimentacao(
                null, // ID will be generated by the database
                alimentacaoRequestDTO.getFoodType(),
                alimentacaoRequestDTO.getQuantity(),
                alimentacaoRequestDTO.getFeedingTime()
        );
    }
}
