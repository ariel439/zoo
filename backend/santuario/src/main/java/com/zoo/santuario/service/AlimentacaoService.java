package com.zoo.santuario.service;

import com.zoo.santuario.dto.AlimentacaoRequestDTO;
import com.zoo.santuario.dto.AlimentacaoResponseDTO;
import com.zoo.santuario.exception.ResourceNotFoundException;
import com.zoo.santuario.model.Alimentacao;
import com.zoo.santuario.repository.AlimentacaoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AlimentacaoService {

    @Autowired
    private AlimentacaoRepository alimentacaoRepository;

    public List<AlimentacaoResponseDTO> getAllAlimentacoes() {
        return alimentacaoRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    // CHANGED: Using the correct repository method names
    public List<AlimentacaoResponseDTO> getFilteredAlimentacoes(String foodType, Long animalId) {
        List<Alimentacao> alimentacoes;
        if (foodType != null && animalId != null) {
            alimentacoes = alimentacaoRepository.findByFoodTypeAndAnimals_Id(foodType, animalId);
        } else if (foodType != null) {
            alimentacoes = alimentacaoRepository.findByFoodType(foodType);
        } else if (animalId != null) {
            alimentacoes = alimentacaoRepository.findByAnimals_Id(animalId);
        } else {
            alimentacoes = alimentacaoRepository.findAll();
        }
        return alimentacoes.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public Optional<AlimentacaoResponseDTO> getAlimentacaoById(Long id) {
        return alimentacaoRepository.findById(id)
                .map(this::convertToDto);
    }

    public AlimentacaoResponseDTO createAlimentacao(AlimentacaoRequestDTO alimentacaoRequestDTO) {
        Alimentacao alimentacao = convertToEntity(alimentacaoRequestDTO);
        Alimentacao savedAlimentacao = alimentacaoRepository.save(alimentacao);
        return convertToDto(savedAlimentacao);
    }

    public Optional<AlimentacaoResponseDTO> updateAlimentacao(Long id, AlimentacaoRequestDTO alimentacaoRequestDTO) {
        return alimentacaoRepository.findById(id)
                .map(existingAlimentacao -> {
                    existingAlimentacao.setPlanName(alimentacaoRequestDTO.getPlanName());
                    existingAlimentacao.setFoodType(alimentacaoRequestDTO.getFoodType());
                    existingAlimentacao.setQuantity(alimentacaoRequestDTO.getQuantity());
                    existingAlimentacao.setFrequency(alimentacaoRequestDTO.getFrequency());
                    Alimentacao updatedAlimentacao = alimentacaoRepository.save(existingAlimentacao);
                    return convertToDto(updatedAlimentacao);
                });
    }
    
    // CHANGED: Added safe-deletion check
    public void deleteAlimentacao(Long id) {
        Alimentacao alimentacao = alimentacaoRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Feeding plan not found with ID: " + id));

        if (!alimentacao.getAnimals().isEmpty()) {
            throw new IllegalStateException("Cannot delete feeding plan because it is still in use by " + alimentacao.getAnimals().size() + " animal(s).");
        }
        
        alimentacaoRepository.delete(alimentacao);
    }

    private AlimentacaoResponseDTO convertToDto(Alimentacao alimentacao) {
        // I have removed the now-unused animalId and animalSpecies from the DTO conversion
        return new AlimentacaoResponseDTO(
                alimentacao.getId(),
                alimentacao.getPlanName(),
                alimentacao.getFoodType(),
                alimentacao.getQuantity(),
                alimentacao.getFrequency()
        );
    }

    private Alimentacao convertToEntity(AlimentacaoRequestDTO alimentacaoRequestDTO) {
        // I have removed the now-unused animalId and animalSpecies from the DTO conversion
        return new Alimentacao(
                null, // ID will be generated by the database
                alimentacaoRequestDTO.getPlanName(),
                alimentacaoRequestDTO.getFoodType(),
                alimentacaoRequestDTO.getQuantity(),
                alimentacaoRequestDTO.getFrequency(),
                null // The 'animals' list will be managed by the relationship
        );
    }
}