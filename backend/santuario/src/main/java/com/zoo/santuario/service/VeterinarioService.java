package com.zoo.santuario.service;

import com.zoo.santuario.dto.VeterinarioRequestDTO;
import com.zoo.santuario.dto.VeterinarioResponseDTO;
import com.zoo.santuario.exception.ResourceNotFoundException;
import com.zoo.santuario.model.Veterinario;
import com.zoo.santuario.repository.VeterinarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class VeterinarioService {

    @Autowired
    private VeterinarioRepository veterinarioRepository;
    
    // ... (getAllVeterinarios, getFilteredVeterinarios, getVeterinarioById, createVeterinario, updateVeterinario are all fine) ...
    public List<VeterinarioResponseDTO> getAllVeterinarios() {
        return veterinarioRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }
    public List<VeterinarioResponseDTO> getFilteredVeterinarios(String specialty) {
        List<Veterinario> veterinarios;
        if (specialty != null) {
            veterinarios = veterinarioRepository.findBySpecialty(specialty);
        } else {
            veterinarios = veterinarioRepository.findAll();
        }
        return veterinarios.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }
    public Optional<VeterinarioResponseDTO> getVeterinarioById(Long id) {
        return veterinarioRepository.findById(id)
                .map(this::convertToDto);
    }
    public VeterinarioResponseDTO createVeterinario(VeterinarioRequestDTO veterinarioRequestDTO) {
        Veterinario veterinario = convertToEntity(veterinarioRequestDTO);
        Veterinario savedVeterinario = veterinarioRepository.save(veterinario);
        return convertToDto(savedVeterinario);
    }
    public Optional<VeterinarioResponseDTO> updateVeterinario(Long id, VeterinarioRequestDTO veterinarioRequestDTO) {
        return veterinarioRepository.findById(id)
                .map(existingVeterinario -> {
                    existingVeterinario.setName(veterinarioRequestDTO.getName());
                    existingVeterinario.setCrmv(veterinarioRequestDTO.getCrmv());
                    existingVeterinario.setSpecialty(veterinarioRequestDTO.getSpecialty());
                    existingVeterinario.setStatus(veterinarioRequestDTO.getStatus());
                    Veterinario updatedVeterinario = veterinarioRepository.save(existingVeterinario);
                    return convertToDto(updatedVeterinario);
                });
    }

    // CHANGED: Added safe-deletion check
    public void deleteVeterinario(Long id) {
        Veterinario veterinario = veterinarioRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Veterinario not found with ID: " + id));

        if (!veterinario.getAnimals().isEmpty()) {
            throw new IllegalStateException("Cannot delete vet " + veterinario.getName() + " because they are still assigned to " + veterinario.getAnimals().size() + " animal(s).");
        }
        
        veterinarioRepository.delete(veterinario);
    }

    private VeterinarioResponseDTO convertToDto(Veterinario veterinario) {
        return new VeterinarioResponseDTO(
                veterinario.getId(),
                veterinario.getName(),
                veterinario.getCrmv(),
                veterinario.getSpecialty(),
                veterinario.getStatus()
        );
    }

    private Veterinario convertToEntity(VeterinarioRequestDTO veterinarioRequestDTO) {
        return new Veterinario(
                null, // ID will be generated by the database
                veterinarioRequestDTO.getName(),
                veterinarioRequestDTO.getCrmv(),
                veterinarioRequestDTO.getSpecialty(),
                veterinarioRequestDTO.getStatus(),
                null // The 'animals' list will be managed by the relationship
        );
    }
}